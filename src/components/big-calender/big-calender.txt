/* eslint-disable @typescript-eslint/no-explicit-any */
"use client";

import { useState } from "react";
import { Calendar as BigCalendar, momentLocalizer, SlotInfo, View } from "react-big-calendar";
import moment, { Moment } from "moment";
import "react-big-calendar/lib/css/react-big-calendar.css";
import withDragAndDrop from "react-big-calendar/lib/addons/dragAndDrop";
import "react-big-calendar/lib/addons/dragAndDrop/styles.css";
// https://v0.dev/t/LQA2c4SCeP7
// import { SketchPicker } from "react-color";
import { Dialog, DialogContent, DialogTitle, DialogFooter } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
// import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from "@/components/ui/select";
import { TrashIcon } from "@radix-ui/react-icons";
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverTrigger, PopoverContent } from "@/components/ui/popover";
import { format } from "date-fns";
import { Switch } from "@/components/ui/switch";
import { Label } from "@/components/ui/label";
import './big-calender.scss';
import CustomToolbar from "./CustomToolbar";

const localizer = momentLocalizer(moment);
const DnDCalendar = withDragAndDrop(BigCalendar);

// ðŸš€ Event Type Definition
interface CalendarEvent {
  id: number;
  title: string;
  start: Date;
  end: Date;
  color: string;
  allDay?: boolean;
}

// ðŸš€ Disabled Dates (Holidays)
const DISABLED_DATES: Moment[] = [
  moment("2025-01-01"), // New Year
  moment("2025-12-25"), // Christmas
  moment("2025-07-04"), // Independence Day
];

const CalendarComponent = () => {
  const [events, setEvents] = useState<CalendarEvent[]>([
    {
      id: 1,
      title: "Meeting with Client",
      start: moment().toDate(),
      end: moment().add(2, "hours").toDate(),
      color: "#4CAF50",
    },
  ]);

  const [modalVisible, setModalVisible] = useState<boolean>(false);
  const [currentEvent, setCurrentEvent] = useState<CalendarEvent | null>(null);
  const [title, setTitle] = useState<string>("");
  const [startDate, setStartDate] = useState<Date | undefined>(new Date());
  const [endDate, setEndDate] = useState<Date | undefined>(new Date());
  const [selectedColor, setSelectedColor] = useState<string>("#2196F3");
  const [isAllDay, setIsAllDay] = useState<boolean>(false);
  const [view, setView] = useState<View>("month");
  const [isDateRange, setIsDateRange] = useState<boolean>(false);

  // ðŸ“Œ Disabled Date Logic
  const disabledDate = (current: Moment): boolean => {
    return (
      current.day() === 0 || // Sunday
      current.day() === 6 || // Saturday
      DISABLED_DATES.some((d) => d.isSame(current, "day"))
    );
  };

  // ðŸ“Œ Select slot (new event)
  const handleSelectSlot = ({ start }: SlotInfo) => {
    if (disabledDate(moment(start))) return;
    setCurrentEvent(null);
    setTitle("");
    setStartDate(start);
    setEndDate(moment(start).add(1, "hour").toDate());
    setSelectedColor("#2196F3");
    setIsDateRange(false);
    setModalVisible(true);
  };

  // ðŸ“Œ Select event (edit event)
  const handleSelectEvent = (event: any) => {
    setCurrentEvent(event);
    setTitle(event.title);
    setStartDate(event.start);
    setEndDate(event.end);
    setSelectedColor(event.color);
    setIsAllDay(event.allDay || false);
    setIsDateRange(event.start !== event.end);
    setModalVisible(true);
  };

  // ðŸ“Œ Handle save/update event
  const handleSave = () => {
    if (!title.trim()) return;
    const newEvent: CalendarEvent = {
      id: currentEvent ? currentEvent.id : Math.random(),
      title,
      start: isDateRange ? startDate! : moment(startDate).toDate(),
      end: isDateRange ? endDate! : moment(startDate).add(1, "hour").toDate(),
      color: selectedColor,
      allDay: isAllDay,
    };

    setEvents((prev) =>
      currentEvent ? prev.map((e) => (e.id === currentEvent.id ? newEvent : e)) : [...prev, newEvent]
    );

    setModalVisible(false);
  };

  // ðŸ“Œ Handle delete event
  const handleDelete = () => {
    if (currentEvent) {
      setEvents((prev) => prev.filter((e) => e.id !== currentEvent.id));
      setModalVisible(false);
    }
  };

  // ðŸ“Œ Drag event
  const onEventDrop = ({ event, start, end }: any) => {
    setEvents((prev: any) =>
      prev.map((e: any) =>
        e.id === event.id ? { ...e, start, end } : e
      )
    );
  };

  // ðŸ“Œ Resize event
  const onEventResize = ({ event, start, end }: any) => {
    setEvents((prev: any) =>
      prev.map((e: any) =>
        e.id === event.id ? { ...e, start, end } : e
      )
    );
  };

  // ðŸŽ¨ Custom event styling
  const eventStyleGetter = (event: object) => {
    const calendarEvent = event as CalendarEvent;
    return {
      style: {
        backgroundColor: calendarEvent.color,
        color: "white",
        borderRadius: "5px",
        padding: "5px",
      },
    };
  };

  return (
    <div className="h-screen p-0 bg-gray-100">
      <DnDCalendar
        localizer={localizer}
        events={events}
        selectable
        onSelectEvent={handleSelectEvent}
        onSelectSlot={handleSelectSlot}
        onEventDrop={onEventDrop}
        onEventResize={onEventResize}
        resizable
        views={["month", "week", "day", "agenda"]}
        defaultView="month"
        view={view}
        onView={(newView: any) => setView(newView)}
        step={60}
        timeslots={1}
        components={{
          toolbar: (props) => <CustomToolbar {...props} />,
          // event: CustomEventCard,
        }}
        className="bg-white shadow-md rounded-lg p-4 custom-calendar custom-scrollbar-lead-dashoard"
        eventPropGetter={eventStyleGetter}
      />

      {/* ðŸ“Œ Event Modal */}
      <Dialog open={modalVisible} onOpenChange={setModalVisible}>
        <DialogContent>
          <DialogTitle>{currentEvent ? "Edit Event" : "Add Event"}</DialogTitle>
          <Input label="Event Name" value={title} onChange={(e) => setTitle(e.target.value)} />

          <Label className="mt-3">Select Date & Time</Label>
          <Popover>
            <PopoverTrigger asChild>
              <Button variant="outline">{format(startDate!, "PPP p")}</Button>
            </PopoverTrigger>
            <PopoverContent className="p-0">
              <Calendar mode="single" selected={startDate} onSelect={setStartDate} initialFocus />
            </PopoverContent>
          </Popover>

          {/* Toggle for "Once" or "Date Range" */}
          <div className="flex items-center gap-3 mt-3">
            <Label>Once</Label>
            <Switch checked={isDateRange} onCheckedChange={setIsDateRange} />
            <Label>Date Range</Label>
          </div>

          {isDateRange && (
            <>
              <Label className="mt-3">End Date</Label>
              <Popover>
                <PopoverTrigger asChild>
                  <Button variant="outline">{format(endDate!, "PPP p")}</Button>
                </PopoverTrigger>
                <PopoverContent className="p-0">
                  <Calendar mode="single" selected={endDate} onSelect={setEndDate} initialFocus />
                </PopoverContent>
              </Popover>
            </>
          )}

          {/* <SketchPicker color={selectedColor} onChangeComplete={(color) => setSelectedColor(color.hex)} /> */}

          <DialogFooter>
            {currentEvent && <Button variant="destructive" onClick={handleDelete}><TrashIcon className="mr-2" /> Delete</Button>}
            <Button onClick={handleSave}>{currentEvent ? "Update" : "Add"}</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default CalendarComponent;


scss

.custom-calendar {
    .rbc-toolbar {
      font-size: 14px;
      padding: 0px 0px;
      margin-bottom: 5px;
    }
  
    .rbc-header {
      font-size: 13px;
      color: #fff;
      display: flex;
      align-items: center;
      justify-content: center;
      height: 25px !important;
      background-color: hsl(var(--primary));
    }
  
    .rbc-event {
      font-size: 12px;
      padding: 2px;
    }
    .rbc-label {
        font-size: 12px;
    }
    .rbc-allday-cell {
      display:none
    }

    .rbc-time-header-cell .rbc-today {
      background-color: hsl(var(--primary-btn-foreground)) !important;
    }
  }
  


CustomToolbar.tsx

"use client";

import React, { useEffect, useState } from "react";
import { ToolbarProps } from "react-big-calendar";
import { Popover, PopoverTrigger, PopoverContent } from "@/components/ui/popover";
import { startOfWeek, startOfMonth, startOfDay } from "date-fns";
import { MonthPicker } from "@/components/ui/monthPicker";
import { Calendar } from "../ui/calendar";
import { cn } from "@/lib/utils";

const CustomToolbar: React.FC<ToolbarProps> = ({ label, onNavigate, onView, view }) => {
  const [selectedDate, setSelectedDate] = useState<Date | undefined>(new Date());
  const [open, setOpen] = React.useState(false)

  useEffect(() => {
    console.log("view : ", view)
  }, [view])

  const handleDateChange = (date: Date | undefined) => {
    if (!date) return;
    setSelectedDate(date);

    switch (view) {
      case "month":
        onNavigate("DATE", startOfMonth(date));
        break;
      case "week":
        onNavigate("DATE", startOfWeek(date));
        break;
      case "day":
        onNavigate("DATE", startOfDay(date));
        break;
      default:
        onNavigate("DATE", date);
        break;
    }
    setOpen(false)
  };

  return (
    <div className="rbc-toolbar">
      
        <div className="flex items-center bg-[#E5E9F2] rounded-lg border border-primary h-[35px]">
          <div
            onClick={() => onNavigate("PREV")}
            className="h-full px-4 border border-r-primary text-sm cursor-pointer rounded-l-lg flex items-center justify-center hover:bg-primary hover:text-white"
          >
            Back
          </div>
          <div
            onClick={() => onNavigate("TODAY")}
            className="h-full px-4 text-sm cursor-pointer flex items-center justify-center hover:bg-primary hover:text-white"
          >
            Today
          </div>
          <div
            onClick={() => onNavigate("NEXT")}
            className="h-full px-4 border border-l-primary text-sm cursor-pointer rounded-r-lg flex items-center justify-center hover:bg-primary hover:text-white"
          >
            Next
          </div>
        </div>

      <Popover open={open} onOpenChange={setOpen}>
        <PopoverTrigger asChild>
          <span className={cn(
            "rbc-toolbar-label cursor-pointer text-[15px] font-semibold text-[#0A1629]"
            , { "text-primary": open }
          )}
          >{label}</span>
        </PopoverTrigger>
        <PopoverContent className="w-auto p-0">
          {view === "month" ? (
            <MonthPicker onMonthSelect={handleDateChange} />
          ) : (
            <Calendar
              mode="single"
              selected={selectedDate}
              onSelect={handleDateChange}
              initialFocus
            />
          )}
        </PopoverContent>
      </Popover>
      <div className="rbc-btn-group">
        <div className="flex items-center bg-[#E5E9F2] rounded-lg border border-primary h-[35px]">
          <div
            onClick={() => onView("month")}
            className={cn(
              "h-full px-4 border border-r-primary text-sm cursor-pointer rounded-l-lg flex items-center justify-center hover:bg-primary hover:text-white",
              { "bg-primary text-white": view === "month" }
            )}
          >
            Month
          </div>
          <div
            onClick={() => onView("week")}
            className={cn(
              "h-full px-4 border border-l-primary text-sm cursor-pointer flex items-center justify-center hover:bg-primary hover:text-white",
              { "bg-primary text-white": view === "week" }
            )}
          >
            Week
          </div>
          <div
            onClick={() => onView("day")}
            className={cn("h-full px-4 border border-l-primary text-sm cursor-pointer rounded-r-lg flex items-center justify-center hover:bg-primary hover:text-white",
              { "bg-primary text-white": view === "day" }
            )}
          >
            Day
          </div>
          {/* <div
            onClick={() => onView("agenda")}
            className={cn("h-full px-4 border border-l-primary text-sm cursor-pointer rounded-r-lg flex items-center justify-center hover:bg-primary hover:text-white",
              { "bg-primary text-white": view === "agenda" }
            )}
          >
            Agenda
          </div> */}
        </div>
      </div>

    </div>
  );
};

export default CustomToolbar;
